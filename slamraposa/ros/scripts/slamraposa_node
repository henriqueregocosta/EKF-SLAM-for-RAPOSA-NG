#!/usr/bin/env python2.7

import matplotlib.pyplot as plt
import math
import numpy as np
import Queue
import rospy
import display
import error_study

import EKF_SLAM
import observations_function as obs
import odometry_function as odo
import kill_function as kill
import slamraposa_ros.slamraposa_node
import EKFstopper

def update_noises(observations, odometry, Q, R):
    observations.Q = Q
    odometry.R = R


def main():
    rospy.init_node('slamraposa', anonymous=False)

    q = Queue.Queue()
    Q = np.identity(3)
    R = np.identity(3)

    operation = EKF_SLAM.SLAM(q)

    observations = obs.ObsInterp(q, Q)
    odometry = odo.OdoInterp(q, R)
    EKFstopper.shutdown(q)

    # to plot the results
    x=[]
    y=[]
    theta=[]
    pose_cov=[]
    true_pose=[]

    trajectory_index = 0
    j = 0
    shutdown = False

    trajectory = error_study.straightline(0,0,0,1,50,'x')
    trajectory.extend(error_study.straightline(50, -1, -math.pi/2, -1, 19, 'y'))
    trajectory.extend(error_study.straightline(49, -20, math.pi, -1, 99, 'x'))
    trajectory.extend(error_study.straightline(-50, -19, math.pi/2, 1, 19, 'y'))
    trajectory.extend(error_study.straightline(-50, 0, 0, 1, 49, 'x'))
    

    first=False
    while not rospy.is_shutdown() and not shutdown:

        x.append(operation.mean_pred[0][0])
        y.append(operation.mean_pred[0][1])
        theta.append(operation.mean_pred[0][2])
        pose_cov.append(operation.cov_pred[:3,:3])
        true_pose.append(trajectory[trajectory_index])

        update_noises(observations, odometry, Q, R)

        event = q.get()     # event = ['obs', markers_I_see, Q]              
                            # or event = ['odo', position_and_quaternions, R]
                            # or event = ['end', string, 0]
        q.task_done()

        if event[0] != 'end':
            if event[0] == 'odo':
                if first:
                    trajectory_index += 1
                first=True
            elif event[0] == 'obs':
                pass

        shutdown = operation.EKF(event)
        j+=1
                
    # display the trajectory and final landmark estimation

    rospy.loginfo('Terminating EKF-SLAM, wait for the plot')
    display.landmarks_and_path(x, y, operation.mean_pred, operation.cov_pred, 'include uncertainty')
    display.cov_time(pose_cov)
    error_study.EKFconsistency(x, y, theta, pose_cov, true_pose)

    return


if __name__ == '__main__':
    main()