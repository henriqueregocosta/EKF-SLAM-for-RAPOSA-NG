#!/usr/bin/env python2.7

import matplotlib.pyplot as plt
import numpy as np
import Queue
import rospy
import thread
import display
import error_study

import EKF_SLAM
import observations_function as obs
import odometry_function as odo
import slamraposa_ros.slamraposa_node
import EKFstopper

def update_noises(observations, odometry, Q, R):
    observations.Q = Q
    odometry.R = R


def main():
    rospy.init_node('slamraposa', anonymous=False)

    q = Queue.Queue()
    Q = np.identity(3)
    R = np.identity(3)

    operation = EKF_SLAM.SLAM(q)

    observations = obs.ObsInterp(q, Q)
    odometry = odo.OdoInterp(q, R)
    EKFstopper.shutdown(q)

    # to plot the results
    x=[]
    y=[]

    j=0
    shutdown = False;

    while not rospy.is_shutdown() and not shutdown:
            
        x.append(operation.mean_pred[0][0])
        y.append(operation.mean_pred[0][1])

        update_noises(observations, odometry, Q, R)

        event = q.get()     # event = ['obs', markers_I_see, Q]              
                            # or event = ['odo', position_and_quaternions, R]
                            # or event = ['end', string, 0]
                 
        shutdown = operation.EKF(event)
        j+=1
        q.task_done() 
                
    # display the trajectory and final landmark estimation

    rospy.loginfo('Terminating EKF-SLAM, wait for the plot')
    display.landmarks_and_path(x, y, operation.mean_pred, operation.cov_pred, 'include uncertainty')
    # error_study.EKFconsistency(operation.mean_pred, operation.cov_pred)

    return

if __name__ == '__main__':
    main()