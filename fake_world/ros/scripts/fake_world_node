#!/usr/bin/env python

import fake_world_ros.fake_world_node
import rospy
import math
import numpy as np
import tf
import random
import matplotlib.pyplot as plt

from geometry_msgs.msg import PoseStamped
from nav_msgs.msg import Odometry
from visualization_msgs.msg import MarkerArray
from visualization_msgs.msg import Marker

class fake_world(object):

    def __init__(self):
        # register node in ROS network
        rospy.init_node('fake_world', anonymous=False)
        # print message in terminal
        rospy.loginfo('fake_world online')

        self.sim_type = 'noisy'

        if self.sim_type == 'noisy':
            rospy.loginfo('This is a noisy simulation')


    def run_sim(self, world_type, robot):
        # world creation
        self.landmarks, self.trajectory = createworld(world_type)

        # for the plot, adjust accordingly to world_type
        plt.xlim((-60,60))
        plt.ylim((-40,20))
        plt.axes().set_aspect('equal')
        plt.xticks(size = 20)
        plt.yticks(size = 20)

        freq = 50
        rate = rospy.Rate(freq)

        # not rospy.is_shutdown() and :
        for j,robot.pose in enumerate(self.trajectory):

            if not rospy.is_shutdown():
                robot.compute_movement(self.trajectory, self.sim_type, j)

                # every x movements, provide observation
                if j%4 == 0 and j != 0:
                    rospy.sleep(10.0/freq)        # sleeps for 25/freq seconds
                    robot.compute_observation(self.landmarks, self.sim_type, j)

                rate.sleep()

        # display the simulation data
        xx=[]
        yy=[]
        for i in range(0, len(self.trajectory)):
            xx.append(self.trajectory[i][0])
            yy.append(self.trajectory[i][1])
        for i in range(0, len(self.landmarks)):
            plt.plot(self.landmarks[i][0], self.landmarks[i][1], 'r+')

        plt.grid(color='lightgray',linestyle='--')
        plt.plot(xx, yy, '-b')    
        plt.title('Synthetic data')
        plt.xlabel('x')
        plt.ylabel('y')
        plt.show()   

        return 

class robot(object):
    # ----------------
    # all robot related stuff are here
    # ----------------

    def __init__(self):
        self.pose=[0, 0, 0]
        # setup publishers
        self.posePublisher = rospy.Publisher('fake_pose', PoseStamped, queue_size=100000)
        self.obsPublisher = rospy.Publisher('fake_obs',MarkerArray,queue_size=100000)
        self.odomPublisher = rospy.Publisher('fake_odom',Odometry,queue_size=100000)
        self.now = rospy.Time.now()

    def compute_observation(self, landmarks, sim_type, j):
        # ------------------------------
        # given landmark world coordinates,
        # computes the true pose of the landmark in
        # the robot (camera) frame of reference
        # also decides which landmarks are in the
        # robots field of view
        # ------------------------------

        observation=[]

        for i in range(len(landmarks)):

            x_lm=landmarks[i][0]
            y_lm=landmarks[i][1]

            x_r=self.pose[0]
            y_r=self.pose[1]
            theta_r=self.pose[2]

            z = np.zeros(3)

            z[0] = (x_lm - x_r)*math.cos(theta_r) + (y_lm - y_r)*math.sin(theta_r)
            z[1] = -(x_lm - x_r)*math.sin(theta_r) + (y_lm - y_r)*math.cos(theta_r)
            z[2] = landmarks[i][2]

            if sim_type == 'noisy':
                # dist = math.sqrt(z[0]**2+z[1]**2)
                # z[0]=z[0]+random.gauss(0,dist*0.05)
                # z[1]=z[1]+random.gauss(0,dist*0.05)

                #normal test
                z[0]=z[0]+random.gauss(0,0.05)
                z[1]=z[1]+random.gauss(0,0.05)
                z[2]=z[2]

                # catastrophic noise testing
                # z[0]=z[0]+random.gauss(0,1)
                # z[1]=z[1]+random.gauss(0,1)
                # z[2]=z[2]

            if self.is_in_line_of_sight(z):
                observation.append(z)

        self.translate_obs(observation, j)

    def is_in_line_of_sight(self, z):
        # -----------------------
        # check if camera measurement is in line of sight
        # -----------------------

        # FOV equal to 140 deg
        FOV=140*math.pi/180

        x = z[0]
        y = z[1]

        dist = math.sqrt(x**2+y**2)

        if x <= 0 or dist > 15:
            return False

        obs_angle = math.atan2(y, x)

        if obs_angle > -FOV/2 and obs_angle < FOV/2:
            return True
        else:
            return False
    
    def translate_obs(self, obs, j):
        # ------------------------------
        # translate obs vector into marker array
        # message
        # -----------------------

        # creates empty MarkerArray message
        markerArray=MarkerArray()

        now = rospy.Time.now()

        for i in range(len(obs)):

            marker=Marker()

            # header
            marker.header.frame_id = "/base_link"
            marker.type = marker.SPHERE
            marker.header.stamp.nsecs = now.nsecs
            marker.header.stamp.secs = now.secs
            # observation
            marker.pose.position.x = obs[i][0]
            marker.pose.position.y = obs[i][1]
            marker.id = obs[i][2]

            marker.pose.position.z = j # for debugging

            markerArray.markers.append(marker)

        # publishes markerArray    
        self.obsPublisher.publish(markerArray)

    def compute_movement(self, trajectory, sim_type, j):
        # ------------------------
        # given the trajectory and the current iteration
        # computes the movement vector
        # ------------------------
        movement = np.zeros(3)
        movement[0] = trajectory[j][0]
        movement[1] = trajectory[j][1]
        movement[2] = trajectory[j][2]

        if sim_type == 'noisy':
            # normal test
            movement[0]=movement[0]+random.gauss(0,0.1)
            movement[1]=movement[1]+random.gauss(0,0.1)
            movement[2]=movement[2]+random.gauss(0,2*math.pi/180)

            # very noisy test
            # movement[0]=movement[0]+random.gauss(0,0.8)
            # movement[1]=movement[1]+random.gauss(0,0.8)
            # movement[2]=movement[2]+random.gauss(0,6*math.pi/180)


        self.translate_odom(movement,j)

    def translate_odom(self, movement,i):
        # --------------------------------------
        # translates movement info into odom message
        # --------------------------------------
        # creates empty pose message
        odom_msg=Odometry()

        now = rospy.Time.now()

        # header
        odom_msg.header.stamp.nsecs = now.nsecs
        odom_msg.header.stamp.secs = now.secs

        # odom
        odom_msg.pose.pose.position.x = movement[0]
        odom_msg.pose.pose.position.y = movement[1]
        quaternion = tf.transformations.quaternion_from_euler(0, 0, movement[2])
        odom_msg.pose.pose.orientation.x = quaternion[0]
        odom_msg.pose.pose.orientation.y = quaternion[1]
        odom_msg.pose.pose.orientation.z = quaternion[2]
        odom_msg.pose.pose.orientation.w = quaternion[3]

        # debugging
        odom_msg.pose.pose.position.z = i

        # publishes odometry message
        self.odomPublisher.publish(odom_msg)

def createworld(worldtype):

    trajectory = []
    landmarks = []

    if worldtype=='world1':
        trajectory = straightline(0,0,0,0.5,10,'x')
        landmarks = finite_wall(0, 1, 10, 1, 'x')
    elif worldtype == 'world2':
        trajectory = straightline(0,0,0,0.5,12,'x')
        trajectory.extend(straightline(6, -0.5, -math.pi/2, -0.5, 8, 'y'))
        trajectory.extend(straightline(6, -5, math.pi, -0.5, 12, 'x'))
        trajectory.extend(straightline(0, -5, math.pi/2, 0.5, 9, 'y'))
        landmarks = finite_wall(-1, 1, 0, 8, 1, 'x')
        landmarks.extend(finite_wall(1, -1, 30, 4, 1, 'x'))
        landmarks.extend(finite_wall(1, -4, 50, 4, 1, 'x'))
        landmarks.extend(finite_wall(-1, -6, 70, 8, 1, 'x'))
        landmarks.extend(finite_wall(7, 0, 90, 6, -1, 'y'))
        landmarks.extend(finite_wall(-1, 0, 110, 6, -1, 'y'))
        landmarks.extend(finite_wall(1, -2, 130, 2, -1, 'y'))
        landmarks.extend(finite_wall(5, -2, 140, 2, -1, 'y'))

    elif worldtype == 'world3':
        trajectory = straightline(0,0,0,0.5,5,'x')
        trajectory.extend(straightline(3, 0, math.pi/4, 0.5, 5, 'angle'))
        trajectory.extend(straightline(5, 2, math.pi/2, 0.5, 5, 'y'))
        trajectory.extend(straightline(5, 4.5, 3*math.pi/4, 0.5, 5, 'angle'))
        trajectory.extend(straightline(3, 6, -3*math.pi/4, 0.5, 5, 'angle'))
        trajectory.extend(straightline(1, 4, 9*math.pi/10, 0.5, 5, 'angle'))
        landmarks = finite_wall(0, 7, 0, 1, 1, 'x')
        landmarks.extend(finite_wall(2.5, 2.5, 5, 0, 1, 'x'))
        landmarks.extend(finite_wall(-2, 3, 10, 0, 1, 'x'))
        landmarks.extend(finite_wall(3, -2, 15, 1, 1, 'x'))

    elif worldtype == 'world4':
        trajectory = straightline(0,0,0,0.1,12*5,'x')
        trajectory.extend(straightline(6, -0.5, -math.pi/2, -0.1, 8*5, 'y'))
        trajectory.extend(straightline(6, -5, math.pi, -0.1, 12*5, 'x'))
        trajectory.extend(straightline(0, -5, math.pi/2, 0.1, 9*5, 'y'))
        landmarks = finite_wall(-1, 1, 0, 2, 4, 'x')
        landmarks.extend(finite_wall(1, -1, 30, 1, 4, 'x'))
        landmarks.extend(finite_wall(1, -4, 50, 1, 4, 'x'))
        landmarks.extend(finite_wall(-1, -6, 70, 1, 4, 'x'))
        landmarks.extend(finite_wall(7, 0, 90, 2, -3, 'y'))
        landmarks.extend(finite_wall(-1, 0, 110, 1, -3, 'y'))
        landmarks.extend(finite_wall(1, -2, 130, 1, -1, 'y'))
        landmarks.extend(finite_wall(5, -2, 140, 1, -1, 'y'))

    elif worldtype == 'world5':
        trajectory = straightline(0,0,0,1,50,'x')
        trajectory.extend(straightline(50, -1, -math.pi/2, -1, 19, 'y'))
        trajectory.extend(straightline(49, -20, math.pi, -1, 99, 'x'))
        trajectory.extend(straightline(-50, -19, math.pi/2, 1, 19, 'y'))
        trajectory.extend(straightline(-50, 0, 0, 1, 49, 'x'))
        landmarks = finite_wall(-45, -10, 0, 5, 17, 'x')
        landmarks.extend(finite_wall(-40, 10, 100, 3, 40, 'x'))
        landmarks.extend(finite_wall(-40, -30, 200, 7, 25, 'x'))

    elif worldtype == 'world6':
        trajectory = circle(200)
        landmarks = finite_wall(-5, -30, 0, 4, 15, 'y')
        landmarks.extend(finite_wall(20, -40, 100, 7, 10, 'y'))
        landmarks.extend(finite_wall(10, -10, 200, 2, 10, 'y'))
        landmarks.extend(finite_wall(30, -10, 300, 2, 10, 'y'))
        landmarks.extend(finite_wall(40, -40, 400, 4, 20, 'y'))

    return landmarks, trajectory

def finite_wall(x, y, first_id, n, step, direction):
    # ---------------
    # x, y, first wall point
    # n number of points
    # ---------------

    if direction=='x':
        inc_x=1
        inc_y=0
    else:
        inc_x=0
        inc_y=1

    wall=[[x, y, first_id]]

    i=0
    while i<n:
        x=x+inc_x*step
        y=y+inc_y*step
        identif=i+first_id+1;
        wall.append([x, y, identif])
        i+=1

    return wall

def straightline(x, y, theta, step, n, direction):
    # -------------
    # x, y, theta first points
    # -------------

    # if direction is 1 direction is y, 0 otherwise
    if direction=='x':
        inc_x=1
        inc_y=0
    elif direction == 'y':
        inc_x=0
        inc_y=1
    elif direction == 'angle':
        inc_x=math.cos(theta)
        inc_y=math.sin(theta)


    trajectory=[[0, 0, 0]]
    trajectory[0][0] = x
    trajectory[0][1] = y
    trajectory[0][2] = theta

    for i in range(n):
        point=[0, 0, 0]
        point[0]=trajectory[i][0]+inc_x*step
        point[1]=trajectory[i][1]+inc_y*step
        point[2]=trajectory[i][2]
        trajectory.append(point)

    return trajectory

def circle(n):

    trajectory=[[0, 0, 0]]
    u = 20
    v = 0
    a = 20
    b = 20

    t = np.linspace(math.pi, -math.pi, n)
    Ell = np.array([a*np.cos(t) , b*np.sin(t)])  

    # plt.plot( u+Ell_rot[0,:] , v+Ell_rot[1,:],'aqua' )    #rotated ellipse

    for i in range(n):
        point=[0, 0, 0]
        point[0]=u+Ell[0,i]
        point[1]=v+Ell[1,i]
        point[2]=i*2*math.pi/n
        trajectory.append(point)

    return trajectory

def main():
    fake_world1=fake_world()
    robot1=robot()
    fake_world1.run_sim('world6', robot1)

if __name__ == '__main__':
    main()
